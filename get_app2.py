import streamlit as st
import requests
import time

# Configuraci√≥n de la API
API_BASE_URL = "https://o4zgf7m5obg4x4kruerabsxg240vchpd.lambda-url.us-east-1.on.aws"
API_SUBMIT_QUERY = f"{API_BASE_URL}/submit_query"
API_GET_QUERY = f"{API_BASE_URL}/get_query"

# Inicializar el historial en session_state si no existe
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

st.title("üí¨ RAG Chatbot")
st.write("Escribe una pregunta y el sistema te responder√° basado en la base de conocimiento.")

# Campo de entrada para el usuario
query_text = st.text_area("Introduce tu pregunta:")

if st.button("Enviar Consulta"):
    if query_text.strip():
        with st.spinner("Procesando la consulta..."):
            # 1Ô∏è‚É£ Enviar la consulta a la API y obtener el query_id
            response = requests.post(API_SUBMIT_QUERY, json={"query_text": query_text})
            if response.status_code == 200:
                data = response.json()
                query_id = data["query_id"]
                st.session_state.chat_history.append({"role": "user", "text": query_text})

                # 2Ô∏è‚É£ Hacer polling hasta que la respuesta est√© lista
                for i in range(30):  # M√°ximo 30 intentos (~30s)
                    time.sleep(2)  # Esperar 2 segundos antes de intentar nuevamente
                    response = requests.get(API_GET_QUERY, params={"query_id": query_id})
                    if response.status_code == 200:
                        query_data = response.json()
                        if query_data["is_complete"]:
                            bot_response = query_data["answer_text"]
                            st.session_state.chat_history.append({"role": "bot", "text": bot_response})
                            break
                    else:
                        st.error("Error al obtener la respuesta. Int√©ntalo nuevamente.")
                else:
                    bot_response = "‚ö†Ô∏è No se recibi√≥ respuesta a tiempo. Intenta nuevamente m√°s tarde."
                    st.session_state.chat_history.append({"role": "bot", "text": bot_response})
            else:
                st.error("Error al enviar la consulta. Int√©ntalo nuevamente.")
    else:
        st.warning("Por favor, introduce una consulta.")

# üó® Mostrar todo el historial de la conversaci√≥n
st.subheader("üìú Historial de la Conversaci√≥n")
for chat in st.session_state.chat_history:
    if chat["role"] == "user":
        st.markdown(f"üë§ **T√∫:** {chat['text']}")
    else:
        st.markdown(f"ü§ñ **Chatbot:** {chat['text']}")